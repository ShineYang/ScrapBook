package com.shineyang.scrapbook.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shineyang.scrapbook.bean.AppBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_BEAN".
*/
public class AppBeanDao extends AbstractDao<AppBean, Void> {

    public static final String TABLENAME = "APP_BEAN";

    /**
     * Properties of entity AppBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AppName = new Property(0, String.class, "appName", false, "APP_NAME");
        public final static Property AppPackageName = new Property(1, String.class, "appPackageName", false, "APP_PACKAGE_NAME");
        public final static Property AppIocnDir = new Property(2, String.class, "appIocnDir", false, "APP_IOCN_DIR");
        public final static Property ListSize = new Property(3, int.class, "listSize", false, "LIST_SIZE");
    }


    public AppBeanDao(DaoConfig config) {
        super(config);
    }
    
    public AppBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_BEAN\" (" + //
                "\"APP_NAME\" TEXT," + // 0: appName
                "\"APP_PACKAGE_NAME\" TEXT," + // 1: appPackageName
                "\"APP_IOCN_DIR\" TEXT," + // 2: appIocnDir
                "\"LIST_SIZE\" INTEGER NOT NULL );"); // 3: listSize
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppBean entity) {
        stmt.clearBindings();
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(1, appName);
        }
 
        String appPackageName = entity.getAppPackageName();
        if (appPackageName != null) {
            stmt.bindString(2, appPackageName);
        }
 
        String appIocnDir = entity.getAppIocnDir();
        if (appIocnDir != null) {
            stmt.bindString(3, appIocnDir);
        }
        stmt.bindLong(4, entity.getListSize());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppBean entity) {
        stmt.clearBindings();
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(1, appName);
        }
 
        String appPackageName = entity.getAppPackageName();
        if (appPackageName != null) {
            stmt.bindString(2, appPackageName);
        }
 
        String appIocnDir = entity.getAppIocnDir();
        if (appIocnDir != null) {
            stmt.bindString(3, appIocnDir);
        }
        stmt.bindLong(4, entity.getListSize());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AppBean readEntity(Cursor cursor, int offset) {
        AppBean entity = new AppBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // appName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appPackageName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appIocnDir
            cursor.getInt(offset + 3) // listSize
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppBean entity, int offset) {
        entity.setAppName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAppPackageName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppIocnDir(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setListSize(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AppBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AppBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(AppBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
